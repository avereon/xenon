<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.xeomar.pom</groupId>
		<artifactId>jar</artifactId>
		<version>3.0.0-SNAPSHOT</version>
		<relativePath/>
	</parent>

	<!-- Update the product roadmap when the version changes -->
	<groupId>com.xeomar</groupId>
	<artifactId>xenon</artifactId>
	<version>0.7-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Xenon</name>
	<description>A Java application platform for developing modular cross-platform applications.</description>
	<inceptionYear>2017</inceptionYear>

	<developers>
		<developer>
			<name>Mark Soderquist</name>
			<email>mark@soderquist.net</email>
			<roles>
				<role>Architect</role>
			</roles>
		</developer>
	</developers>

	<repositories>
		<repository>
			<id>xeo</id>
			<url>https://code.xeomar.com/repo/xeo</url>
		</repository>
		<repository>
			<id>oss-sonatype</id>
			<!--<url>https://oss.sonatype.org/content/repositories/public/</url>-->
			<url>https://oss.sonatype.org/content/repositories/snapshots/org/openjfx</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>xeo</id>
			<url>https://code.xeomar.com/repo/xeo</url>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- The folder used to set up the installer files -->
		<product-pack-folder>pack/program</product-pack-folder>

		<!-- Runtime dependencies -->
		<slf4j.version>1.8.0-beta0</slf4j.version>
		<miglayout.version>5.1</miglayout.version>
		<controlsfx.version>9.0.0</controlsfx.version>
		<undofx.version>2.0.0</undofx.version>

		<!-- Test dependencies -->
		<testfx.version>4.0.13-alpha</testfx.version>
		<monocle.version>jdk-9+181</monocle.version>

		<!-- Build dependencies -->
		<izpack.version>5.1.3-SNAPSHOT</izpack.version>

		<os.name>unknown</os.name>
	</properties>

	<dependencies>

		<dependency>
			<groupId>com.xeomar</groupId>
			<artifactId>razor</artifactId>
			<version>0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.xeomar</groupId>
			<artifactId>annex</artifactId>
			<version>0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.base.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.controls.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.graphics.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.media.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.swing.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>11-ea</version>
			<scope>system</scope>
			<systemPath>${project.basedir}/source/main/module/javafx/${javafx.platform}/javafx.web.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout-javafx</artifactId>
			<version>${miglayout.version}</version>
		</dependency>

		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>${controlsfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.fxmisc.undo</groupId>
			<artifactId>undofx</artifactId>
			<version>${undofx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-core</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>openjfx-monocle</artifactId>
			<version>${monocle.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>source/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- Works with Java 9.0.4 and Surefire 2.20.1 -->
				<version>2.20.1</version>
				<configuration>
					<forkCount>1</forkCount>
					<reuseForks>false</reuseForks>
					<runOrder>alphabetical</runOrder>
					<argLine>
						-Xmx128m
						--add-opens=java.base/java.util=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
						--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
					</argLine>
					<systemPropertyVariables>
						<!-- Set testfx.setup.timeout to a reasonable time -->
						<!-- This might be as low as 1000 for a fast computer -->
						<!-- This might be as high as 5000 for a slow computer -->
						<testfx.setup.timeout>5000</testfx.setup.timeout>
						<!-- Set testfx.headless to true to run FX tests in headless mode -->
						<testfx.headless>true</testfx.headless>
						<!-- Set testfx.robot to glass when running tests in headless mode -->
						<testfx.robot>glass</testfx.robot>
						<!-- Set prism.order to sw when running tests in headless mode -->
						<!-- https://wiki.openjdk.java.net/display/OpenJFX/Monocle -->
						<prism.order>sw</prism.order>
						<!-- Not sure what this setting does but it's in all the examples found -->
						<prism.text>t2k</prism.text>

						<!-- Set java.awt.headless to true when running tests in headless mode -->
						<java.awt.headless>true</java.awt.headless>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<id>copy</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>compile</includeScope>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<arguments>
								<argument>${project.basedir}/source/main/bin/module-patch.sh</argument>
								<argument>${project.build.directory}/dependency/reactfx.jar</argument>
								<argument>${project.build.directory}/dependency/undofx.jar</argument>
								<argument>${project.build.directory}/dependency/jackson-annotations.jar</argument>
								<argument>${project.build.directory}/dependency/jackson-databind.jar</argument>
								<argument>${project.build.directory}/dependency/commons-io.jar</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jlink-plugin</artifactId>
				<version>3.0.0-alpha-1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jlink</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<ignoreSigningInformation>true</ignoreSigningInformation>
				</configuration>
			</plugin>
			-->

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<!-- Generate the package resource -->
					<execution>
						<id>assembly-product</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<attach>false</attach>
							<descriptors>
								<descriptor>source/main/assembly/product.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

					<!-- Generate the installer resources -->
					<execution>
						<id>assembly-install</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<attach>false</attach>
							<descriptors>
								<descriptor>source/main/assembly/install.xml</descriptor>
							</descriptors>
							<finalName>${product-pack-folder}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copy extra installer resources. -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-izpack-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/izpack</directory>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>copy-izpack-resources-filter</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/izpack</directory>
									<filtering>true</filtering>
									<excludes>
										<exclude>bin</exclude>
									</excludes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>copy-windows-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/pack/windows</directory>
									<excludes>
										<exclude>bin</exclude>
									</excludes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/pack/windows</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Generate the installer -->
			<plugin>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-maven-plugin</artifactId>
				<version>${izpack.version}</version>
				<executions>
					<execution>
						<id>izpack.deploy</id>
						<phase>package</phase>
						<goals>
							<goal>izpack</goal>
						</goals>
						<configuration>
							<installFile>${basedir}/target/main/izpack/installer.xml</installFile>
							<baseDir>${project.build.directory}</baseDir>
							<classifier>install</classifier>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<!-- Add the catalog card -->
								<artifact>
									<file>target/main/java/META-INF/catalog.card</file>
									<classifier>catalog</classifier>
									<type>card</type>
								</artifact>
								<!-- Add the product card -->
								<artifact>
									<file>target/main/java/META-INF/product.card</file>
									<classifier>product</classifier>
									<type>card</type>
								</artifact>
								<!-- Add the product pack -->
								<artifact>
									<file>target/${project.artifactId}-${project.version}-product.zip</file>
									<classifier>product</classifier>
									<type>pack</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<name>linux</name>
				</os>
			</activation>
			<properties>
				<javafx.platform>linux</javafx.platform>
			</properties>
		</profile>
		<profile>
			<id>macosx</id>
			<activation>
				<os>
					<name>mac os x</name>
				</os>
			</activation>
			<properties>
				<javafx.platform>mac</javafx.platform>
			</properties>
		</profile>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<javafx.platform>win</javafx.platform>
			</properties>
		</profile>
		<profile>
			<id>javafx.platform.custom</id>
			<activation>
				<property>
					<name>javafx.platform</name>
				</property>
			</activation>
			<properties>
				<javafx.platform.linux>${javafx.platform}</javafx.platform.linux>
				<javafx.platform.mac>${javafx.platform}</javafx.platform.mac>
				<javafx.platform.win>${javafx.platform}</javafx.platform.win>
			</properties>
		</profile>
	</profiles>

</project>
