<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.avereon.pom</groupId>
		<artifactId>prg</artifactId>
		<version>3.1.0-SNAPSHOT</version>
		<relativePath/>
	</parent>

	<!-- Update the product roadmap when the version changes -->
	<groupId>com.avereon</groupId>
	<artifactId>xenon</artifactId>
	<!-- To do a release, merge to the stage branch, update the version and then merge to the stable branch -->
	<!-- Also update the version in the jpackage descriptors -->
	<version>1.4-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Xenon</name>
	<description>A cross-platform, modular, productivity suite for unique work.</description>
	<inceptionYear>2017</inceptionYear>

	<licenses>
		<license>
			<name>MIT</name>
			<url>https://avereon.com/licenses/mit/</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:https://github.com/avereon/xenon.git</connection>
		<developerConnection>scm:git:https://github.com/avereon/xenon.git</developerConnection>
		<url>https://github.com/avereon/xenon</url>
	</scm>

	<developers>
		<developer>
			<name>Mark Soderquist</name>
			<email>mark@avereon.com</email>
			<roles>
				<role>Architect</role>
			</roles>
		</developer>
	</developers>

	<repositories>
		<repository>
			<id>avn</id>
			<url>https://repo.avereon.com/avn</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>avn</id>
			<url>https://repo.avereon.com/avn</url>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<images-folder>target/main/images</images-folder>
		<!-- The folder used to set up the installer files -->
		<product-pack-folder>pack/program</product-pack-folder>

		<reactfx.version>2.0-M5</reactfx.version>
		<undofx.version>2.1.0</undofx.version>

		<!-- Version numbers updated 02 Jul 2020 -->
		<!-- Runtime dependencies -->
		<miglayout.version>5.2</miglayout.version>

		<!-- Build dependencies -->
		<izpack.version>5.1.3</izpack.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>zevra</artifactId>
			<version>${zevra.version}</version>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>zerra</artifactId>
			<version>${zerra.version}</version>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>zenna</artifactId>
			<version>${zenna.version}</version>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>weave</artifactId>
			<version>${weave.version}</version>
		</dependency>

		<!--		<dependency>-->
		<!--			<groupId>org.apache.commons</groupId>-->
		<!--			<artifactId>commons-vfs2</artifactId>-->
		<!--			<version>2.6.0</version>-->
		<!--		</dependency>-->

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${openjfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>${openjfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>${openjfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>${openjfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.reactfx</groupId>
			<artifactId>reactfx</artifactId>
			<version>${reactfx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.fxmisc.undo</groupId>
			<artifactId>undofx</artifactId>
			<version>${undofx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>${controlsfx.version}</version>
			<exclusions>
				<!-- Exclude the openjfx libraries, they are already available -->
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout-javafx</artifactId>
			<version>${miglayout.version}</version>
			<exclusions>
				<!-- Exclude the openjfx libraries, they are already available -->
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-core</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
			<exclusions>
				<!-- Exclude the openjfx libraries, they are already available -->
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit5</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
			<exclusions>
				<!-- Exclude the junit-jupiter-api, it is already available-->
				<exclusion>
					<groupId>org.junit.jupiter</groupId>
					<artifactId>junit-jupiter-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>openjfx-monocle</artifactId>
			<version>${monocle.version}</version>
			<scope>test</scope>
			<exclusions>
				<!-- Exclude the openjfx libraries, they are already available -->
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>source/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- Version comes from parent -->
				<configuration>
					<!-- The argLine and systemPropertyVariables should match the failsafe configuration below -->
					<argLine>
						-Xmx128m
						--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.asset=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.product=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.task=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.tool.guide=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.tool.product=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.tool.settings=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.util=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.workpane=ALL-UNNAMED
						--add-opens=com.avereon.xenon/com.avereon.xenon.workspace=ALL-UNNAMED
					</argLine>
					<systemPropertyVariables>
						<!-- Set testfx.setup.timeout to a reasonable time -->
						<!-- This might be as low as 1000 for a fast computer -->
						<!-- This might be as high as 5000 for a slow computer -->
						<testfx.setup.timeout>5000</testfx.setup.timeout>
						<!-- Set testfx.headless to true to run FX tests in headless mode -->
						<testfx.headless>true</testfx.headless>
						<!-- Set testfx.robot to glass when running tests in headless mode -->
						<testfx.robot>glass</testfx.robot>
						<!-- Set prism.order to sw when running tests in headless mode -->
						<!-- https://wiki.openjdk.java.net/display/OpenJFX/Monocle -->
						<prism.order>sw</prism.order>
						<!-- Not sure what this setting does but it's in all the examples found -->
						<prism.text>t2k</prism.text>
						<!-- Set java.awt.headless to true when running tests in headless mode -->
						<java.awt.headless>true</java.awt.headless>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.avereon.xenon.Launcher</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<links>
						<link>https://www.avereon.com/product/weave/docs/api</link>
						<link>https://www.avereon.com/product/zevra/docs/api</link>
					</links>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.avereon</groupId>
				<artifactId>cameo</artifactId>
				<version>${cameo.version}</version>
				<executions>
					<execution>
						<id>render-images</id>
						<phase>package</phase>
						<goals>
							<goal>render</goal>
						</goals>
						<configuration>
							<images>
								<image>
									<class>com.avereon.xenon.image.InstallerBannerImage</class>
									<target>${images-folder}/banner.png</target>
									<theme>light</theme>
								</image>
								<image>
									<class>com.avereon.zenna.icon.XRingLargeIcon</class>
									<target>${images-folder}/xenon.png</target>
									<theme>dark</theme>
								</image>
								<image>
									<class>com.avereon.zenna.icon.XRingLargeIcon</class>
									<target>${images-folder}/xenon-light.png</target>
									<theme>light</theme>
								</image>
							</images>
							<icons>
								<icon>
									<target>${images-folder}/xenon.ico</target>
									<images>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>16</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>24</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>32</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>48</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>64</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>96</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>128</size>
										</image>
									</images>
								</icon>
								<icon>
									<target>${images-folder}/xenon-light.ico</target>
									<theme>light</theme>
									<images>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>16</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>24</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>32</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>48</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>64</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>96</size>
										</image>
										<image>
											<class>com.avereon.zenna.icon.XRingLargeIcon</class>
											<size>128</size>
										</image>
									</images>
								</icon>
							</icons>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.version}</version>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.avereon</groupId>
				<artifactId>curex</artifactId>
				<version>${curex.version}</version>
				<executions>
					<execution>
						<id>patch-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>patch</goal>
						</goals>
						<configuration>
							<modulePath>${project.build.directory}/dependency</modulePath>
							<jars>
								<jar>
									<name>miglayout-core*.jar</name>
								</jar>
								<jar>
									<name>image4j*.jar</name>
								</jar>
								<jar>
									<name>miglayout-javafx*.jar</name>
									<modules>
										<module>javafx.base</module>
										<module>javafx.graphics</module>
										<module>javafx.controls</module>
										<module>miglayout.core</module>
									</modules>
								</jar>
								<jar>
									<name>reactfx*.jar</name>
									<modules>
										<module>javafx.base</module>
										<module>javafx.graphics</module>
										<module>javafx.controls</module>
									</modules>
								</jar>
								<jar>
									<name>undofx*.jar</name>
									<modules>
										<module>reactfx</module>
									</modules>
								</jar>
							</jars>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>14</source>
					<target>14</target>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<profiles>
		<profile>
			<id>screenshots1x</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${maven.exec.version}</version>
						<executions>
							<execution>
								<id>screenshots1x</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<classpathScope>runtime</classpathScope>
									<arguments>
										<argument>-Xmx128m</argument>
										<argument>-p</argument>
										<modulepath/>
										<argument>-m</argument>
										<argument>com.avereon.xenon/com.avereon.xenon.Screenshots1x</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>screenshots2x</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${maven.exec.version}</version>
						<executions>
							<execution>
								<id>screenshots2x</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<classpathScope>runtime</classpathScope>
									<arguments>
										<argument>-Xmx256m</argument>
										<argument>-p</argument>
										<modulepath/>
										<argument>-m</argument>
										<argument>com.avereon.xenon/com.avereon.xenon.Screenshots2x</argument>
										<argument>-Dglass.uiScale=2</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>testui</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<!-- Version comes from parent -->
						<executions>
							<execution>
								<id>testui</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<forkCount>1</forkCount>
									<reuseForks>false</reuseForks>
									<runOrder>alphabetical</runOrder>
									<argLine>
										-Xmx128m
										--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
										--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.asset=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.product=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.task=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.task.chain=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.tool=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.tool.guide=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.tool.product=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.tool.settings=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.util=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.workpane=ALL-UNNAMED
										--add-opens=com.avereon.xenon/com.avereon.xenon.workspace=ALL-UNNAMED
									</argLine>
									<systemPropertyVariables>
										<!-- Set testfx.setup.timeout to a reasonable time -->
										<!-- This might be as low as 1000 for a fast computer -->
										<!-- This might be as high as 5000 for a slow computer -->
										<testfx.setup.timeout>5000</testfx.setup.timeout>
										<!-- Set testfx.headless to true to run FX tests in headless mode -->
										<testfx.headless>true</testfx.headless>
										<!-- Set testfx.robot to glass when running tests in headless mode -->
										<testfx.robot>glass</testfx.robot>
										<!-- Set prism.order to sw when running tests in headless mode -->
										<!-- https://wiki.openjdk.java.net/display/OpenJFX/Monocle -->
										<prism.order>sw</prism.order>
										<!-- Not sure what this setting does but it's in all the examples found -->
										<prism.text>t2k</prism.text>
										<!-- Set java.awt.headless to true when running tests in headless mode -->
										<java.awt.headless>true</java.awt.headless>
									</systemPropertyVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>assemblies</id>
			<build>
				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${maven.exec.version}</version>
						<executions>
							<execution>
								<id>jlink</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${java.home}/bin/jlink</executable>
									<arguments>
										<argument>--module-path</argument>
										<argument>${jlink.module.path}</argument>
										<argument>--add-modules</argument>
										<argument>com.avereon.xenon</argument>
										<argument>--output</argument>
										<argument>${basedir}/target/jlink</argument>
										<argument>--launcher</argument>
										<argument>xenon=com.avereon.xenon/com.avereon.xenon.Launcher</argument>
										<argument>--ignore-signing-information</argument>
										<argument>--no-header-files</argument>
										<argument>--no-man-pages</argument>
										<argument>--strip-debug</argument>
										<argument>--compress</argument>
										<argument>2</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<!-- Assemble the product pack -->
							<execution>
								<id>assembly-product</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>product</finalName>
									<descriptorRefs>
										<descriptorRef>product-${product.platform}</descriptorRef>
									</descriptorRefs>
									<ignoreMissingDescriptor>true</ignoreMissingDescriptor>
								</configuration>
							</execution>
							<!-- Assemble the installer files -->
							<execution>
								<id>assembly-install</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<attach>false</attach>
									<finalName>${product-pack-folder}</finalName>
									<descriptorRefs>
										<descriptorRef>install-${product.platform}</descriptorRef>
									</descriptorRefs>
									<appendAssemblyId>false</appendAssemblyId>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy extra installer resources -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-izpack-resources</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${basedir}/source/main/izpack</directory>
										</resource>
									</resources>
									<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>copy-izpack-resources-filter</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${basedir}/source/main/izpack</directory>
											<filtering>true</filtering>
											<excludes>
												<exclude>bin</exclude>
											</excludes>
										</resource>
									</resources>
									<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>copy-platform-resources</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${basedir}/source/main/pack/${product.platform}</directory>
											<excludes>
												<exclude>bin</exclude>
											</excludes>
										</resource>
									</resources>
									<outputDirectory>${basedir}/target/pack/${product.platform}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Generate the installer -->
					<plugin>
						<groupId>org.codehaus.izpack</groupId>
						<artifactId>izpack-maven-plugin</artifactId>
						<version>${izpack.version}</version>
						<executions>
							<execution>
								<id>izpack-deploy</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>izpack</goal>
								</goals>
								<configuration>
									<enableAttachArtifact>false</enableAttachArtifact>
									<installFile>${basedir}/target/main/izpack/installer.xml</installFile>
									<baseDir>${project.build.directory}</baseDir>
									<finalName>install</finalName>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>packs</id>
			<build>
				<plugins>

					<!-- Copy jpackage option files -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>jpackage-option-files</id>
								<!-- This can be put back to post-integration-test once assemblies profiles is removed -->
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<resources>
										<resource>
											<directory>${basedir}/source/main/jpackage</directory>
											<filtering>true</filtering>
											<excludes>
												<exclude>bin</exclude>
											</excludes>
										</resource>
									</resources>
									<outputDirectory>${basedir}/target/main/jpackage</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- https://docs.oracle.com/en/java/javase/14/jpackage/support-application-features.html -->
					<!-- MacOS does not allow -SNAPSHOT in version -->
					<!-- MacOS requires version strings can consist of only numbers and up to two dots -->
					<!-- Windows does not allow -SNAPSHOT in version -->
					<!-- Windows requires version format z.y.x.w https://docs.microsoft.com/en-us/windows/win32/msi/version -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${maven.exec.version}</version>
						<executions>
							<execution>
								<id>jpackage-product-pack</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${java.home}/bin/jpackage</executable>
									<arguments>
										<argument>@${basedir}/target/main/jpackage/app.options</argument>
										<argument>@${basedir}/target/main/jpackage/product-pack-common.options</argument>
										<argument>@${basedir}/target/main/jpackage/product-pack-${product.platform}.options</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>jpackage-install-pack</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${java.home}/bin/jpackage</executable>
									<arguments>
										<argument>@${basedir}/target/main/jpackage/app.options</argument>
										<argument>@${basedir}/target/main/jpackage/install-pack-common.options</argument>
										<argument>@${basedir}/target/main/jpackage/install-pack-${product.platform}.options</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<!-- Assemble the product pack -->
							<execution>
								<!-- Must match execution id parent pom -->
								<id>assembly-product</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<finalName>product</finalName>
									<descriptorRefs>
										<descriptorRef>product-${product.platform}</descriptorRef>
									</descriptorRefs>
									<ignoreMissingDescriptor>true</ignoreMissingDescriptor>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>

</project>
