<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.xeomar.pom</groupId>
		<artifactId>jar</artifactId>
		<version>3.0.0-SNAPSHOT</version>
		<relativePath/>
	</parent>

	<!-- Update the product roadmap when the version changes -->
	<groupId>com.xeomar</groupId>
	<artifactId>xenon</artifactId>
	<version>0.6-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Xenon</name>
	<description>A Java application platform for developing modular cross-platform applications.</description>
	<inceptionYear>2017</inceptionYear>

	<developers>
		<developer>
			<name>Mark Soderquist</name>
			<email>mark@soderquist.net</email>
			<roles>
				<role>Architect</role>
			</roles>
		</developer>
	</developers>

	<repositories>
		<repository>
			<id>xeo</id>
			<url>https://code.xeomar.com/repo/xeo</url>
		</repository>
	</repositories>

	<properties>
		<!-- The folder used to set up the installer files -->
		<product-pack-folder>pack/program</product-pack-folder>

		<slf4j.version>1.8.0-beta0</slf4j.version>
		<testfx.version>4.0.10-alpha</testfx.version>
		<izpack.version>5.1.3-SNAPSHOT</izpack.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>com.xeomar</groupId>
			<artifactId>razor</artifactId>
			<version>0.1-SNAPSHOT</version>
			<classifier>jar-with-dependencies</classifier>
		</dependency>

		<dependency>
			<groupId>com.xeomar</groupId>
			<artifactId>annex</artifactId>
			<version>0.1-SNAPSHOT</version>
			<classifier>jar-with-dependencies</classifier>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout-javafx</artifactId>
			<version>5.0</version>
		</dependency>

		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>8.40.14</version>
		</dependency>

		<dependency>
			<groupId>org.fxmisc.undo</groupId>
			<artifactId>undofx</artifactId>
			<version>1.3.1</version>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-core</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.testfx</groupId>
					<artifactId>testfx-internal-java8</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-internal-java9</artifactId>
			<version>${testfx.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>openjfx-monocle</artifactId>
			<version>jdk-9+181</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<resources>
			<resource>
				<directory>source/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- Version 2.20.1 fixes a NoClassDefFoundError -->
				<version>2.20.1</version>
				<configuration>
					<forkCount>1</forkCount>
					<reuseForks>false</reuseForks>
					<runOrder>alphabetical</runOrder>
					<argLine>
						-Xmx256m
						--add-opens=java.base/java.util=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
						--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
					</argLine>
					<systemPropertyVariables>
						<java.awt.headless>true</java.awt.headless>
						<prism.text>t2k</prism.text>
						<prism.order>sw</prism.order>
						<testfx.robot>glass</testfx.robot>
						<testfx.headless>true</testfx.headless>
						<testfx.setup.timeout>2000</testfx.setup.timeout>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<!-- Indexing the jar breaks the use of the Class-Path entry. -->
						<!-- <index>true</index> -->
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>com.xeomar.xenon.Program</mainClass>
							<classpathLayoutType>custom</classpathLayoutType>
							<customClasspathLayout>$${artifact.artifactId}.$${artifact.extension}</customClasspathLayout>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<!-- Generate the package resource -->
					<execution>
						<id>assembly-product</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<attach>false</attach>
							<descriptors>
								<descriptor>source/main/assembly/product.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>

					<!-- Generate the installer resources -->
					<execution>
						<id>assembly-install</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<attach>false</attach>
							<descriptors>
								<descriptor>source/main/assembly/install.xml</descriptor>
							</descriptors>
							<finalName>${product-pack-folder}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copy extra installer resources. -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-izpack-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/izpack</directory>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>copy-izpack-resources-filter</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/izpack</directory>
									<filtering>true</filtering>
									<excludes>
										<exclude>bin</exclude>
									</excludes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/main/izpack</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>copy-windows-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>${basedir}/source/main/pack/windows</directory>
									<excludes>
										<exclude>bin</exclude>
									</excludes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/pack/windows</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Generate the installer -->
			<plugin>
				<groupId>org.codehaus.izpack</groupId>
				<artifactId>izpack-maven-plugin</artifactId>
				<version>${izpack.version}</version>
				<executions>
					<execution>
						<id>izpack.deploy</id>
						<phase>package</phase>
						<goals>
							<goal>izpack</goal>
						</goals>
						<configuration>
							<installFile>${basedir}/target/main/izpack/installer.xml</installFile>
							<baseDir>${project.build.directory}</baseDir>
							<classifier>install</classifier>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<!-- Add the catalog card -->
								<artifact>
									<file>target/main/java/META-INF/catalog.card</file>
									<classifier>catalog</classifier>
									<type>card</type>
								</artifact>
								<!-- Add the product card -->
								<artifact>
									<file>target/main/java/META-INF/product.card</file>
									<classifier>product</classifier>
									<type>card</type>
								</artifact>
								<!-- Add the product pack -->
								<artifact>
									<file>target/${project.artifactId}-${project.version}-product.zip</file>
									<classifier>product</classifier>
									<type>pack</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
